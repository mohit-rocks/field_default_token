<?php

/**
 * @file
 * Contains field_default_token.module..
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\field\Entity\FieldConfig;
use Drupal\Core\Entity\EntityManagerInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Field\FieldDefinitionInterface;

/**
 * Implements hook_help().
 */
function field_default_token_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the field_default_token module.
    case 'help.page.field_default_token':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Enables to use tokens as field default values.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_entity_update().
 * @param \Drupal\field\Entity\FieldConfig $field_config
 */
function field_default_token_field_config_update(FieldConfig $field_config) {
  $has_tokens = FALSE;
  if (!empty($field_config->getDefaultValue())) {
    foreach ($field_config->getDefaultValue() as $values) {
      if (!is_array($values)) {
        if (strpos($values, '[') !== FALSE) {
          $has_tokens = TRUE;
        }
      }
      else {
        foreach ($values as $value) {
          if (!is_array($value)) {
            if (strpos($value, '[') !== FALSE) {
              $has_tokens = TRUE;
            }
          }
          else {
            foreach ($value as $column_value) {
              if (is_array($column_value)) {
                // Complex fields such as Table Field contain a structure inside the value, skip them.
                continue;
              }
              if (strpos($column_value, '[') !== FALSE) {
                $has_tokens = TRUE;
              }
            }
          }
        }
      }
    }
  }

  $update = FALSE;

  if (empty($field_config->getDefaultValueCallback())) {
    if ($has_tokens) {
      $field_config->setDefaultValueCallback('field_default_token_default_value_function');
      $update = TRUE;
    }
  }
  elseif ($field_config->getDefaultValueCallback() == 'field_default_token_default_value_function') {
    if (!$has_tokens) {
      $field_config->setDefaultValueCallback('');
      $update = TRUE;
    }
  }

  if ($update) {
    // Save the instance and clear caches again without hook invoking.
    $field_config->save();
    EntityManagerInterface::clearCachedFieldDefinitions();
  }
}

function field_default_token_default_value_function(FieldableEntityInterface $entity, FieldDefinitionInterface $definition) {

  $instance = $definition->
    $entity->
}
